package analizadorcorreo;

import analizadorJCC.ParseException;
import analizadorJCC.TokenMgrError;
import analizadorJCC.Correo;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import util.Archivo;

/**
 *
 * @author Arturo
 */
public class PanelEditor extends javax.swing.JPanel { //Otra forma de implementar los eventos

    private String[] lineas;
    private Correo lex;
    private boolean claseIniciada = false;

    /**
     * Creates new form PanelEditor
     */
    public PanelEditor() {
        initComponents();
    }

    public JSplitPane getSP() {
        return jSplitPane1;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        scroll = new javax.swing.JScrollPane();
        areaTexto = new javax.swing.JTextArea();
        scroll2 = new javax.swing.JScrollPane();
        areaConsola = new javax.swing.JTextArea();

        setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        setLayout(new java.awt.BorderLayout());

        jSplitPane1.setDividerLocation(110);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setResizeWeight(0.5);
        jSplitPane1.setLastDividerLocation(390);

        scroll.setBackground(getBackground());
        scroll.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        areaTexto.setColumns(20);
        areaTexto.setRows(5);
        scroll.setViewportView(areaTexto);

        jSplitPane1.setLeftComponent(scroll);

        scroll2.setBorder(javax.swing.BorderFactory.createTitledBorder("Salida de consola"));

        areaConsola.setEditable(false);
        areaConsola.setColumns(20);
        areaConsola.setRows(5);
        scroll2.setViewportView(areaConsola);

        jSplitPane1.setRightComponent(scroll2);

        add(jSplitPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea areaConsola;
    private javax.swing.JTextArea areaTexto;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JScrollPane scroll;
    private javax.swing.JScrollPane scroll2;
    // End of variables declaration//GEN-END:variables

    public void abrirArchivo() {
        if (!confirmarGuardado()) {
            return;
        }
        JFileChooser seleccion = new JFileChooser();
        seleccion.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter filtro1 //Limita el tipo de archivo que se puede seleccionar en el FileChooser
                = new FileNameExtensionFilter("Archivos de texto", "txt");
        seleccion.setFileFilter(filtro1); //Pasar el parametro del filtro al FileChooser
        
        int opcion = seleccion.showOpenDialog(this);
        if (opcion == JFileChooser.APPROVE_OPTION) {
            limpiarPantalla();
            String archivo = seleccion.getSelectedFile().getAbsolutePath();
            ArrayList<String> lineal = Archivo.leerArchivo(archivo);
            getAreaTexto().setText("");
            for (String linea : lineal) { //For each, no es necesario usar una variable de control
                getAreaTexto().append(linea + "\n");
            }
        }
    }

    public void guardarArchivo() {
        lineas = getAreaTexto().getText().split("\n");
        JFileChooser seleccion = new JFileChooser();
        seleccion.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter filtro1 //Limita el tipo de archivo que se puede seleccionar en el FileChooser
                = new FileNameExtensionFilter("Archivos de texto (.txt)", "txt");
        seleccion.setFileFilter(filtro1);
        
        int opcion = seleccion.showSaveDialog(this);
        if (opcion == JFileChooser.APPROVE_OPTION) {
            String ext = "." + ((FileNameExtensionFilter) seleccion.getFileFilter()).getExtensions()[0];
            String rutaArchivo = seleccion.getSelectedFile().getAbsolutePath();
            if (!rutaArchivo.endsWith(ext)) {
                rutaArchivo += ext;
            }
            Archivo.grabarArchivo(rutaArchivo, lineas);
        }
    }

    public void analisisLexico() {
        String in = areaTexto.getText();
        try {
            System.out.println("-Análisis léxico iniciado-");
            InputStream ini = new ByteArrayInputStream(in.getBytes(StandardCharsets.UTF_8));
            if (claseIniciada) {
                Correo.ReInit(ini);
                Correo.iniciarAnalisisLexico();
            } else {
                claseIniciada = true;
                lex = new Correo(ini);
                Correo.iniciarAnalisisLexico();

            }
            JOptionPane.showMessageDialog(this, "Analisis léxico terminado");
            System.out.println("-Analisis léxico terminado sin errores-");
        } catch (TokenMgrError | ParseException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            System.out.println("-Análisis léxico terminado con errores-");
        }

    }

    public void analisisSintactico() {
        String in = areaTexto.getText();
        try {
            System.out.println("-Análisis sintáctico iniciado-");
            InputStream ini = new ByteArrayInputStream(in.getBytes(StandardCharsets.UTF_8));
            if (claseIniciada) {
                Correo.ReInit(ini);
                Correo.ExpressionList();
            } else {
                claseIniciada = true;
                lex = new Correo(ini);
                Correo.ExpressionList();

            }
            JOptionPane.showMessageDialog(this, "Analisis sintáctico terminado");
            System.out.println("-Analisis sintáctico terminado sin errores-");
        } catch (TokenMgrError | ParseException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            System.out.println("-Análisis sintáctico terminado con errores-");
        }
    }

    public void limpiarPantalla() {
        this.areaTexto.setText("");
        this.areaConsola.setText("");
    }

    public boolean confirmarGuardado() {
        if (areaTexto.getText().trim().length() > 0) {
            int res = JOptionPane.showConfirmDialog(this, "¿Deseas guardar los cambios realizados?",
                    "¿Guardar?", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (res == JOptionPane.YES_OPTION) {
                guardarArchivo();
            } else if (res == JOptionPane.CANCEL_OPTION) {
                return false;
            }
        }
        return true;
    }

    /**
     * @return the areaTexto
     */
    public javax.swing.JTextArea getAreaTexto() {
        return areaTexto;
    }

    public JTextArea getAreaConsola() {
        return areaConsola;
    }

    /**
     * @param areaTexto the areaTexto to set
     */
    public void setAreaTexto(javax.swing.JTextArea areaTexto) {
        this.areaTexto = areaTexto;
    }
}
